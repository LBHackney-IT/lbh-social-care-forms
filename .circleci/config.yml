version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.0.0
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

executors:
  node-executor:
    docker:
      - image: cimg/node:14.18-browsers
  docker-python:
    docker:
      - image: circleci/python:3.7

references:
  workspace_root: &workspace_root '~'
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

jobs:
  install-dependencies:
    executor: node-executor
    steps:
      - *attach_workspace
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn --frozen-lockfile
      - run:
          name: Set GitHub username and email
          command: git config user.email "ci@hackney.gov.uk" && git config user.name "lbhackney-automation"
      - save_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
            - /home/circleci/.cache/Cypress
      - persist_to_workspace:
          root: *workspace_root
          paths: .

  validate-pr-title:
    executor: node-executor
    steps:
      - *attach_workspace
      - run:
          name: Run PR title validator
          command: yarn validate-pr-title

  unit-tests:
    executor: node-executor
    steps:
      - *attach_workspace
      - run:
          name: Run linter
          command: yarn lint
      - run:
          name: Run typecheck
          command: yarn type-check
      - run:
          name: Run tests
          command: yarn test -w 2

  build:
    executor: node-executor
    steps:
      - *attach_workspace
      - run:
          name: Build app
          command: yarn build
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - project/build
            
  prepare-layer-directory:
    executor: node-executor
    steps:
      - *attach_workspace
      - run:
          name: prepare layer directory
          command: yarn prepare-node-modules

  e2e:
    executor: node-executor
    steps:
      - *attach_workspace
      - run:
          name: Run E2E
          command: yarn e2e
      - store_artifacts:
          path: ~/project/cypress/screenshots
      - store_artifacts:
          path: ~/project/cypress/videos

  owasp-zap-baseline-scan:
    machine:
      image: ubuntu-2004:202104-01
    steps:
      - checkout
      - *attach_workspace

      - run:
          name: Run application in background
          command: NODE_ENV=production PORT=3000 yarn start
          background: true

      - run:
          name: Pull owasp zap docker image
          command: docker pull owasp/zap2docker-stable:2.10.0

      - run:
          name: ZAP baseline test of application
          # It will exit with codes of:
          # 0: Success
          # 1: At least 1 FAIL
          # 2: At least one WARN and no FAILs
          # 3: Any other failure
          # Link to above:https://github.com/zaproxy/zaproxy/blob/main/docker/zap-baseline.py#L31-L35
          command: |
            (
              docker run -t owasp/zap2docker-stable:2.10.0 zap-baseline.py \
              -j \
              -u https://raw.githubusercontent.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}/zap-baseline.conf \
              -t http://$(ip -f inet -o addr show docker0 | awk '{print $4}' | cut -d '/' -f 1):3000 || \
              if [[ $? == 0 || $? == 2 ]]; then exit 0; else exit 1; fi;
            )
  build-deploy-staging:
    executor: aws-cli/default
    # environment:
    #   SENTRY_ORG: $SENTRY_ORG
    #   SENTRY_PROJECT: $SENTRY_PROJECT
    #   SENTRY_ENVIRONMENT: dev
    steps:
      - *attach_workspace
      - run:
          name: deploy
          command: yarn --frozen-lockfile --production=true && sudo npm i -g serverless && sls deploy --stage staging
      # - run:
      #     name: Create release and notify Sentry of deploy staging
      #     command: |
      #       curl -sL https://sentry.io/get-cli/ | bash
      #       export SENTRY_RELEASE=$(sentry-cli releases propose-version)
      #       sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
      #       sentry-cli releases set-commits $SENTRY_RELEASE --auto
      #       sentry-cli releases finalize $SENTRY_RELEASE
      #       sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT

  build-deploy-mosaic-production:
    executor: aws-cli/default
    # environment:
    #   SENTRY_ORG: $SENTRY_ORG
    #   SENTRY_PROJECT: $SENTRY_PROJECT
    #   SENTRY_ENVIRONMENT: production
    steps:
      - *attach_workspace
      - run:
          name: deploy
          command: yarn --frozen-lockfile --production=true && sudo npm i -g serverless && sls deploy -s mosaic-prod
      # - run:
      #     name: Create release and notify Sentry of deploy production
      #     command: |
      #       curl -sL https://sentry.io/get-cli/ | bash
      #       export SENTRY_RELEASE=$(sentry-cli releases propose-version)
      #       sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
      #       sentry-cli releases set-commits $SENTRY_RELEASE --auto
      #       sentry-cli releases finalize $SENTRY_RELEASE
      #       sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT

  generate-draft-github-release:
    executor: aws-cli/default
    steps:
      - *attach_workspace
      - run:
          name: delete stale draft GitHub releases
          command: yarn delete-draft-github-releases
      - run:
          name: generate draft GitHub release
          command: yarn release --github.draft --no-git.push --no-git.tag

  generate-github-release:
    executor: aws-cli/default
    steps:
      - *attach_workspace
      - add_ssh_keys:
          fingerprints:
            - 'd0:bd:5a:9f:c3:17:88:3a:df:03:42:7b:f6:f7:3c:72'
      - run:
          name: delete stale draft GitHub releases
          command: yarn delete-draft-github-releases
      - run:
          name: generate release
          command: yarn release

  assume-role-staging:
    executor: docker-python
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: $AWS_ACCOUNT_STAGING
          profile_name: default
          role: 'LBH_Circle_CI_Deployment_Role'
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws

  assume-role-mosaic-production:
    executor: docker-python
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: $AWS_ACCOUNT_PRODUCTION
          profile_name: default
          role: 'circleci-assume-role'
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws
  
  # notify-sentry-deploy:
  #   executor: node-executor
  #   environment:
  #     SENTRY_ORG: $SENTRY_ORG
  #     SENTRY_PROJECT: $SENTRY_PROJECT
  #     SENTRY_ENVIRONMENT: production
  #   steps:
  #     - checkout
  #     - run:
  #         name: Create release and notify Sentry of deploy
  #         command: |
  #           curl -sL https://sentry.io/get-cli/ | bash
  #           export SENTRY_RELEASE=$(sentry-cli releases propose-version)
  #           sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
  #           sentry-cli releases set-commits $SENTRY_RELEASE --auto
  #           sentry-cli releases files $SENTRY_RELEASE upload-sourcemaps path-to-sourcemaps-if-applicable
  #           sentry-cli releases finalize $SENTRY_RELEASE
  #           sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT

workflows:
  version: 2
  continuous-delivery:
    jobs:
      - install-dependencies
      - prepare-layer-directory:
          requires:
            - install-dependencies
      - unit-tests:
          requires:
            - install-dependencies
      - validate-pr-title:
          requires:
            - install-dependencies
          filters:
            branches:
              ignore:
                - main
      - build:
          requires:
            - install-dependencies
      - e2e:
          requires:
            - build
      - owasp-zap-baseline-scan:
          requires:
            - build
      - generate-draft-github-release:
          requires:
            - unit-tests
            - e2e
            - owasp-zap-baseline-scan
          filters:
            branches:
              only: main
      - assume-role-staging:
          context: api-assume-role-staging-context
          requires:
            - unit-tests
            - e2e
            - owasp-zap-baseline-scan
          filters:
            branches:
              only: main
      - build-deploy-staging:
          requires:
            - assume-role-staging
          filters:
            branches:
              only: main
      - permit-deploy-mosaic-production:
          type: approval
          requires:
            - build-deploy-staging
          filters:
            branches:
              only: main
      - assume-role-mosaic-production:
          context: api-assume-role-social-care-production-context
          requires:
            - permit-deploy-mosaic-production
          filters:
            branches:
              only: main
      - build-deploy-mosaic-production:
          requires:
            - assume-role-mosaic-production
          filters:
            branches:
              only: main
      - generate-github-release:
          requires:
            - build-deploy-mosaic-production
          filters:
            branches:
              only: main